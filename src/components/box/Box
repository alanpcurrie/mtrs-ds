import React, { memo } from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';
import { type ClassValue, clsx } from 'clsx';

import { twMerge } from 'tailwind-merge';

type BoxProps<T extends keyof JSX.IntrinsicElements> = {
  variant: T;
  className?: string | VariantProps<typeof boxVariants>;
} & JSX.IntrinsicElements[T];

const boxVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
);

const Box =
  <T extends keyof JSX.IntrinsicElements>(props: BoxProps<T>) =>
  (children: React.ReactNode) => {
    const { variant, className, ...restProps } = props;
    const boxClasses = cva(boxVariants({ variant, size, className }));
    return React.createElement(
      variant,
      { className: boxClasses, ...restProps },
      children,
    );
  };

// const MemoizedBox = memo(Box) as typeof Box;

const NavBox = Box({ variant: 'nav', className: 'navbar' });
const FooterBox = Box({ variant: 'footer', className: 'footer' });

const elementExamples = () => {
  return (
    <>
      {NavBox(<p>{'navbar text'}</p>)}
      {FooterBox(<span>{'footer text'}</span>)}
    </>
  );
};
